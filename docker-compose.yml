

services:

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    mem_limit: 512m
    cpus: 0.5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      retries: 5

  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SONAR_JDBC_USERNAME: ${POSTGRES_USER}
      SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 4g
    cpus: 1.0

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 1g
    cpus: 1.0
    depends_on:
      - sonarqube
      - db


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=development
    mem_limit: 512m
    cpus: 0.5
    depends_on:
      - backend


  scanner:
    image: sonarsource/sonar-scanner-cli:latest
    depends_on:
      - sonarqube
    volumes:
      - ./:/usr/src
    working_dir: /usr/src
    entrypoint: ["sonar-scanner"]




volumes:
  db_data:
  sonar_data:
  sonarqube_extensions:
  sonarqube_data:
